definitions:
  model.FlagPayload:
    properties:
      infectedUser:
        type: integer
      infectionStatus:
        type: integer
      user:
        type: integer
    required:
    - infectedUser
    - infectionStatus
    - user
    type: object
  model.HealthResponse:
    properties:
      status:
        type: string
      version:
        type: string
    type: object
  model.Inventory:
    properties:
      ammunition:
        type: integer
      food:
        type: integer
      medication:
        type: integer
      water:
        type: integer
    type: object
  model.Location:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  model.Response:
    properties:
      message:
        type: string
    type: object
  model.Robots:
    properties:
      category:
        type: string
      manufacturedDate:
        type: string
      model:
        type: string
      serialNumber:
        type: string
    type: object
  model.Survivor:
    properties:
      age:
        type: integer
      coOrdinates:
        type: string
      gender:
        type: string
      id:
        type: integer
      infectionStatus:
        type: string
      inventory:
        $ref: '#/definitions/model.Inventory'
      location:
        $ref: '#/definitions/model.Location'
      name:
        type: string
    type: object
  model.SurvivorPayload:
    properties:
      age:
        type: integer
      gender:
        type: string
      infectionStatus:
        type: string
      inventory:
        $ref: '#/definitions/model.Inventory'
      location:
        $ref: '#/definitions/model.Location'
      name:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/rob/v1/healthz:
    get:
      description: Health Check API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HealthResponse'
      summary: Health
      tags:
      - Health
  /api/rob/v1/reports/list/robots:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Robots'
            type: array
        "500":
          description: '{"message":0,"err_code": "ERR_*", "error": "err"}'
          schema:
            type: string
      summary: lists all the robots
      tags:
      - Reports
  /api/rob/v1/reports/list/survivors:
    get:
      parameters:
      - description: infected / nonInfected
        in: query
        name: infectionStatus
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Survivor'
            type: array
        "500":
          description: '{"message":0,"err_code": "ERR_*", "error": "err"}'
          schema:
            type: string
      summary: lists all the survivors
      tags:
      - Reports
  /api/rob/v1/reports/percentage/survivors:
    get:
      parameters:
      - description: infected / nonInfected
        in: query
        name: infectionStatus
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Survivor'
            type: array
        "500":
          description: '{"message":0,"err_code": "ERR_*", "error": "err"}'
          schema:
            type: string
      summary: lists all the robots
      tags:
      - Reports
  /api/rob/v1/survivor/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: request body
        in: body
        name: AddSurvivor
        required: true
        schema:
          $ref: '#/definitions/model.SurvivorPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: '{"message":0,"err_code": "ERR_*", "error": "err"}'
          schema:
            type: string
        "500":
          description: '{"message":0,"err_code": "ERR_*", "error": "err"}'
          schema:
            type: string
      summary: add new survivor to the base
      tags:
      - Survivor
  /api/rob/v1/survivor/flag:
    put:
      consumes:
      - application/json
      parameters:
      - description: request body
        in: body
        name: FlagSurvivor
        required: true
        schema:
          $ref: '#/definitions/model.FlagPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: '{"message":0,"err_code": "ERR_*", "error": "err"}'
          schema:
            type: string
        "500":
          description: '{"message":0,"err_code": "ERR_*", "error": "err"}'
          schema:
            type: string
      summary: add new survivor to the base
      tags:
      - Survivor
  /api/rob/v1/survivor/update:
    put:
      consumes:
      - application/json
      parameters:
      - description: user id
        in: query
        name: userId
        required: true
        type: string
      - description: request body
        in: body
        name: UpdateSurvivorLocation
        required: true
        schema:
          $ref: '#/definitions/model.Location'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: '{"message":0,"err_code": "ERR_*", "error": "err"}'
          schema:
            type: string
        "500":
          description: '{"message":0,"err_code": "ERR_*", "error": "err"}'
          schema:
            type: string
      summary: add new survivor to the base
      tags:
      - Survivor
swagger: "2.0"
